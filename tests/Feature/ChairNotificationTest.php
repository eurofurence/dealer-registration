<?php

namespace Tests\Feature;

use App\Models\Application;
use App\Models\TableType;
use App\Models\User;
use App\Notifications\PhysicalChairsChangedNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Notification;
use PHPUnit\Framework\Assert;
use Tests\TestCase;

class ChairNotificationTest extends TestCase
{
    use RefreshDatabase;

    private User $user;

    public function setUp(): void
    {
        parent::setUp();

        // to avoid registration fields not being filled
        Config::set('convention.reg_start_date', Carbon::yesterday());
        Config::set('convention.reg_end_date', Carbon::tomorrow());
        Config::set('convention.con_end_date', Carbon::tomorrow());

        $this->seed();
        $this->user = User::factory()->create();
        $this->actingAs($this->user);

        Notification::fake();
    }

    protected function tearDown(): void
    {
        $this->user->application?->deleteQuietly();
        $this->user->deleteQuietly();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    private function get_application($user = null): Application
    {
        return ($user ?? $this->user)->application->first();
    }

    public function test_raw_application_creation_sends_no_notification_email()
    {
        Notification::fake();

        Application::factory()->create([
            'user_id' => $this->user->id,
        ]);

        Notification::assertNothingSent();

    }

    public function test_changing_chair_count_sends_notification_email_for_uncancelled_dealers()
    {
        Notification::fake();

        Application::factory()->create([
            'user_id' => $this->user->id,
            'type' => 'dealer',
            'canceled_at' => null,
        ]);

        $this->get_application()->update([
            'physical_chairs' => 2
        ]);

        Notification::assertSentTo([$this->user], PhysicalChairsChangedNotification::class);

    }

    public function test_changing_chair_count_does_not_send_notification_email_for_cancelled_dealers()
    {
        Notification::fake();

        Application::factory()->create([
            'user_id' => $this->user->id,
            'type' => 'dealer',
            'canceled_at' => Carbon::yesterday(),
        ]);

        $this->get_application()->update([
            'physical_chairs' => 2
        ]);

        Notification::assertNothingSent();

    }

    public function test_changing_chair_count_does_not_send_notification_email_for_non_dealers()
    {
        // Note: This would only be the case when e.g. a chair count from a previous "full" application leaked trough
        Notification::fake();

        Application::factory()->create([
            'user_id' => $this->user->id,
            'type' => 'share',
            'canceled_at' => null,
        ]);

        $this->get_application()->update([
            'physical_chairs' => 2
        ]);

        Notification::assertNothingSent();

    }

    private function assertChairCount($expected, $message): void
    {
        $this->assertEquals($expected, $this->get_application()->physical_chairs, $message);
    }

    private function assertChairChangeNotification($newChairCount): void
    {
        Notification::assertSentTo([$this->user], PhysicalChairsChangedNotification::class,
            function (PhysicalChairsChangedNotification $notification) use ($newChairCount) {
                $mail = $notification->toMail($this->user);
                Assert::assertStringContainsString(
                    sprintf('your dealership will receive %d physical chairs', $newChairCount),
                    strip_tags(join(' ', $mail->introLines)),
                    'Mail text does not contain expected information about the new seat count.');

                return true;
            });
    }

    public function test_changing_table_enforces_chair_count_and_sends_notification_email()
    {
        Notification::fake();

        // Creating a 3-seat table application with full chair count.
        Application::factory()->create([
            'user_id' => $this->user->id,
            'type' => 'dealer',
            'canceled_at' => null,
            'table_type_requested' => TableType::where(['seats' => 3])->first()->id,
            'table_type_assigned' => null,
            'physical_chairs' => 3,
        ]);

        Notification::assertNothingSent();
        $this->assertChairCount(3, 'Chair count is validly stored');

        info('Try adding too many chairs');
        $this->get_application()->update([
            'physical_chairs' => 4
        ]);

        $this->assertChairCount(3, 'Excessive chair count is enforced away');
        Notification::assertNothingSent();

        Notification::fake(); // clear since we expect an actual message now

        // Downgrade requested table, which should trigger a chair count reduction and email notification
        $this->get_application()->update([
            'table_type_requested' => TableType::where(['seats' => 2])->first()->id,
        ]);

        $this->assertChairCount(2, 'Smaller requested table enforces reduced chairs');
        $this->assertChairChangeNotification(2);

        Notification::fake(); // clear since we expect a different message now

        // Downgrade again by assinging an even smaller table, which should trigger a chair count reduction and email notification
        $this->get_application()->update([
            'table_type_assigned' => TableType::where(['seats' => 1])->first()->id,
        ]);

        $this->assertChairCount(1, 'Assigning an even Smaller table enforces reduced chairs');
        $this->assertChairChangeNotification(1);

    }

}
